{"_id":{"$oid":"5abc83337cbc002c891c5628"},"articleId":1,"title":"My Experience in Mongolia","author":"Martha Kauffman","body":"For anyone who isn’t already familiar with it, Google puts out a style guide for writing JavaScript that lays out (what Google believes to be) the best stylistic practices for writing clean, understandable code.\nThese are not hard and fast rules for writing valid JavaScript, only proscriptions for maintaining consistent and appealing style choices throughout your source files. This is particularly interesting for JavaScript, which is a flexible and forgiving language that allows for a wide variety of stylistic choices.\nGoogle and Airbnb have two of the most popular style guides out there. I’d definitely recommend you check out both of them if you spend much time writing JS.\nThe following are thirteen of what I think are the most interesting and relevant rules from Google’s JS Style Guide.\nThey deal with everything from hotly contested issues (tabs versus spaces, and the controversial issue of how semicolons should be used), to a few more obscure specifications which surprised me. They will definitely change the way I write my JS going forward.\nFor each rule, I’ll give a summary of the specification, followed by a supporting quote from the style guide that describes the rule in detail. Where applicable, I’ll also provide an example of the style in practice, and contrast it with code that does not follow the rule.\nUse spaces, not tabs\nAside from the line terminator sequence, the ASCII horizontal space character (0x20) is the only whitespace character that appears anywhere in a source file. This implies that… Tab characters are not used for indentation.\nThe guide later specifies you should use two spaces (not four) for indentation.\n// bad\nfunction foo() {\n∙∙∙∙let name;\n}\n\n// bad\nfunction bar() {\n∙let name;\n}\n\n// good\nfunction baz() {\n∙∙let name;\n}\nSemicolons ARE required\nEvery statement must be terminated with a semicolon. Relying on automatic semicolon insertion is forbidden.\nAlthough I can’t imagine why anyone is opposed to this idea, the consistent use of semicolons in JS is becoming the new ‘spaces versus tabs’ debate. Google’s coming out firmly here in the defence of the semicolon.\n// bad\nlet luke = {}\nlet leia = {}\n[luke, leia].forEach(jedi =\u003e jedi.father = 'vader')\n// good\nlet luke = {};\nlet leia = {};\n[luke, leia].forEach((jedi) =\u003e {\n  jedi.father = 'vader';\n});\nDon’t use ES6 modules (yet)\nDo not use ES6 modules yet (i.e. the export and import keywords), as their semantics are not yet finalized. Note that this policy will be revisited once the semantics are fully-standard.\n// Don't do this kind of thing yet:\n//------ lib.js ------\nexport function square(x) {\n    return x * x;\n}\nexport function diag(x, y) {\n    return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\nimport { square, diag } from 'lib';\nHorizontal alignment is discouraged (but not forbidden)\nThis practice is permitted, but it is generally discouraged by Google Style. It is not even required to maintain horizontal alignment in places where it was already used.\nHorizontal alignment is the practice of adding a variable number of additional spaces in your code, to make certain tokens appear directly below certain other tokens on previous lines.\n// bad\n{\n  tiny:   42,  \n  longer: 435, \n};\n// good\n{\n  tiny: 42, \n  longer: 435,\n};\nDon’t use var anymore\nDeclare all local variables with either const or let. Use const by default, unless a variable needs to be reassigned. The var keyword must not be used.\nI still see people using var in code samples on StackOverflow and elsewhere. I can’t tell if there are people out there who will make a case for it, or if it’s just a case of old habits dying hard.\n// bad\nvar example = 42;\n// good\nlet example = 42;\nArrow functions are preferred\nArrow functions provide a concise syntax and fix a number of difficulties with this. Prefer arrow functions over the function keyword, particularly for nested functions\nI’ll be honest, I just thought that arrow functions were great because they were more concise and nicer to look at. Turns out they also serve a pretty important purpose.\n// bad\n[1, 2, 3].map(function (x) {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) =\u003e {\n  const y = x + 1;\n  return x * y;\n});\nUse template strings instead of concatenation\nUse template strings (delimited with `) over complex string concatenation, particularly if multiple string literals are involved. Template strings may span multiple lines.\n// bad\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n\n// bad\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n\n// bad\nfunction sayHi(name) {\n  return `How are you, ${ name }?`;\n}\n\n// good\nfunction sayHi(name) {\n  return `How are you, ${name}?`;\n}\nDon’t use line continuations for long strings\nDo not use line continuations (that is, ending a line inside a string literal with a backslash) in either ordinary or template string literals. Even though ES5 allows this, it can lead to tricky errors if any trailing whitespace comes after the slash, and is less obvious to readers.\nInterestingly enough, this is a rule that Google and Airbnb disagree on (here’s Airbnb’s spec).\nWhile Google recommends concatenating longer strings (as shown below) Airbnb’s style guide recommends essentially doing nothing, and allowing long strings to go on as long as they need to.\n// bad (sorry, this doesn't show up well on mobile)\nconst longString = 'This is a very long string that \\\n    far exceeds the 80 column limit. It unfortunately \\\n    contains long stretches of spaces due to how the \\\n    continued lines are indented.';\n// good\nconst longString = 'This is a very long string that ' + \n    'far exceeds the 80 column limit. It does not contain ' + \n    'long stretches of spaces since the concatenated ' +\n    'strings are cleaner.';\n“for… of” is the preferred type of ‘for loop’\nWith ES6, the language now has three different kinds of for loops. All may be used, though for-of loops should be preferred when possible.\nThis is a strange one if you ask me, but I thought I’d include it because it is pretty interesting that Google declares a preferred type of for loop.\nI was always under the impression that for... in loops were better for objects, while for... of were better suited to arrays. A ‘right tool for the right job’ type situation.\nWhile Google’s specification here doesn’t necessarily contradict that idea, it is still interesting to know they have a preference for this loop in particular.\nDon’t use eval()\nDo not use eval or the Function(...string) constructor (except for code loaders). These features are potentially dangerous and simply do not work in CSP environments.\nThe MDN page for eval() even has a section called “Don’t use eval!”\n// bad\nlet obj = { a: 20, b: 30 };\nlet propName = getPropName();  // returns \"a\" or \"b\"\neval( 'var result = obj.' + propName );\n// good\nlet obj = { a: 20, b: 30 };\nlet propName = getPropName();  // returns \"a\" or \"b\"\nlet result = obj[ propName ];  //  obj[ \"a\" ] is the same as obj.a\nConstants should be named in ALL_UPPERCASE separated by underscores\nConstant names use CONSTANT_CASE: all uppercase letters, with words separated by underscores.\nIf you’re absolutely sure that a variable shouldn’t change, you can indicate this by capitalizing the name of the constant. This makes the constant’s immutability obvious as it gets used throughout your code.\nA notable exception to this rule is if the constant is function-scoped. In this case it should be written in camelCase.\n// bad\nconst number = 5;\n// good\nconst NUMBER = 5;\nOne variable per declaration\nEvery local variable declaration declares only one variable: declarations such as let a = 1, b = 2; are not used.\n// bad\nlet a = 1, b = 2, c = 3;\n// good\nlet a = 1;\nlet b = 2;\nlet c = 3;\nUse single quotes, not double quotes\nOrdinary string literals are delimited with single quotes ('), rather than double quotes (\").\nTip: if a string contains a single quote character, consider using a template string to avoid having to escape the quote.\n// bad\nlet directive = \"No identification of self or mission.\"\n// bad\nlet saying = 'Say it ain\\u0027t so.';\n// good\nlet directive = 'No identification of self or mission.';\n// good\nlet saying = `Say it ain't so`;\nA final note\nAs I said in the beginning, these are not mandates. Google is just one of many tech giants, and these are just recommendations.\nThat said, it is interesting to look at the style recommendations that are put out by a company like Google, which employs a lot of brilliant people who spend a lot of time writing excellent code.\nYou can follow these rules if you want to follow the guidelines for ‘Google compliant source code’ — but, of course, plenty of people disagree, and you’re free to brush any or all of this off.\nI personally think there are plenty of cases where Airbnb’s spec is more appealing than Google’s. No matter the stance you take on these particular rules, it is still important to keep stylistic consistency in mind when write any sort of code.","__v":0}
{"_id":{"$oid":"5abd9d2aa759312da852ee38"},"articleId":2,"title":"Spending 5 days in Thailand","author":"Ben Douglas","body":"my second article","__v":0}
{"_id":{"$oid":"5abd9d41baf3e22daa1847c7"},"articleId":3,"title":"Working from Beach","author":"David Schwimmer","body":"my third article","__v":0}
{"_id":{"$oid":"5ac054ce306e59cad8e38f2f"},"articleId":4,"title":"Week off in Iceland","author":"Daniel Simmons","body":"For anyone who isn’t already familiar with it, Google puts out a style guide for writing JavaScript that lays out (what Google believes to be) the best stylistic practices for writing clean, understandable code.\nThese are not hard and fast rules for writing valid JavaScript, only proscriptions for maintaining consistent and appealing style choices throughout your source files. This is particularly interesting for JavaScript, which is a flexible and forgiving language that allows for a wide variety of stylistic choices.\nGoogle and Airbnb have two of the most popular style guides out there. I’d definitely recommend you check out both of them if you spend much time writing JS.\nThe following are thirteen of what I think are the most interesting and relevant rules from Google’s JS Style Guide.\nThey deal with everything from hotly contested issues (tabs versus spaces, and the controversial issue of how semicolons should be used), to a few more obscure specifications which surprised me. They will definitely change the way I write my JS going forward.\nFor each rule, I’ll give a summary of the specification, followed by a supporting quote from the style guide that describes the rule in detail. Where applicable, I’ll also provide an example of the style in practice, and contrast it with code that does not follow the rule.\nUse spaces, not tabs\nAside from the line terminator sequence, the ASCII horizontal space character (0x20) is the only whitespace character that appears anywhere in a source file. This implies that… Tab characters are not used for indentation.\nThe guide later specifies you should use two spaces (not four) for indentation.\n// bad\nfunction foo() {\n∙∙∙∙let name;\n}\n\n// bad\nfunction bar() {\n∙let name;\n}\n\n// good\nfunction baz() {\n∙∙let name;\n}\nSemicolons ARE required\nEvery statement must be terminated with a semicolon. Relying on automatic semicolon insertion is forbidden.\nAlthough I can’t imagine why anyone is opposed to this idea, the consistent use of semicolons in JS is becoming the new ‘spaces versus tabs’ debate. Google’s coming out firmly here in the defence of the semicolon.\n// bad\nlet luke = {}\nlet leia = {}\n[luke, leia].forEach(jedi =\u003e jedi.father = 'vader')\n// good\nlet luke = {};\nlet leia = {};\n[luke, leia].forEach((jedi) =\u003e {\n  jedi.father = 'vader';\n});\nDon’t use ES6 modules (yet)\nDo not use ES6 modules yet (i.e. the export and import keywords), as their semantics are not yet finalized. Note that this policy will be revisited once the semantics are fully-standard.\n// Don't do this kind of thing yet:\n//------ lib.js ------\nexport function square(x) {\n    return x * x;\n}\nexport function diag(x, y) {\n    return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\nimport { square, diag } from 'lib';\nHorizontal alignment is discouraged (but not forbidden)\nThis practice is permitted, but it is generally discouraged by Google Style. It is not even required to maintain horizontal alignment in places where it was already used.\nHorizontal alignment is the practice of adding a variable number of additional spaces in your code, to make certain tokens appear directly below certain other tokens on previous lines.\n// bad\n{\n  tiny:   42,  \n  longer: 435, \n};\n// good\n{\n  tiny: 42, \n  longer: 435,\n};\nDon’t use var anymore\nDeclare all local variables with either const or let. Use const by default, unless a variable needs to be reassigned. The var keyword must not be used.\nI still see people using var in code samples on StackOverflow and elsewhere. I can’t tell if there are people out there who will make a case for it, or if it’s just a case of old habits dying hard.\n// bad\nvar example = 42;\n// good\nlet example = 42;\nArrow functions are preferred\nArrow functions provide a concise syntax and fix a number of difficulties with this. Prefer arrow functions over the function keyword, particularly for nested functions\nI’ll be honest, I just thought that arrow functions were great because they were more concise and nicer to look at. Turns out they also serve a pretty important purpose.\n// bad\n[1, 2, 3].map(function (x) {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) =\u003e {\n  const y = x + 1;\n  return x * y;\n});\nUse template strings instead of concatenation\nUse template strings (delimited with `) over complex string concatenation, particularly if multiple string literals are involved. Template strings may span multiple lines.\n// bad\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n\n// bad\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n\n// bad\nfunction sayHi(name) {\n  return `How are you, ${ name }?`;\n}\n\n// good\nfunction sayHi(name) {\n  return `How are you, ${name}?`;\n}\nDon’t use line continuations for long strings\nDo not use line continuations (that is, ending a line inside a string literal with a backslash) in either ordinary or template string literals. Even though ES5 allows this, it can lead to tricky errors if any trailing whitespace comes after the slash, and is less obvious to readers.\nInterestingly enough, this is a rule that Google and Airbnb disagree on (here’s Airbnb’s spec).\nWhile Google recommends concatenating longer strings (as shown below) Airbnb’s style guide recommends essentially doing nothing, and allowing long strings to go on as long as they need to.\n// bad (sorry, this doesn't show up well on mobile)\nconst longString = 'This is a very long string that \\\n    far exceeds the 80 column limit. It unfortunately \\\n    contains long stretches of spaces due to how the \\\n    continued lines are indented.';\n// good\nconst longString = 'This is a very long string that ' + \n    'far exceeds the 80 column limit. It does not contain ' + \n    'long stretches of spaces since the concatenated ' +\n    'strings are cleaner.';\n“for… of” is the preferred type of ‘for loop’\nWith ES6, the language now has three different kinds of for loops. All may be used, though for-of loops should be preferred when possible.\nThis is a strange one if you ask me, but I thought I’d include it because it is pretty interesting that Google declares a preferred type of for loop.\nI was always under the impression that for... in loops were better for objects, while for... of were better suited to arrays. A ‘right tool for the right job’ type situation.\nWhile Google’s specification here doesn’t necessarily contradict that idea, it is still interesting to know they have a preference for this loop in particular.\nDon’t use eval()\nDo not use eval or the Function(...string) constructor (except for code loaders). These features are potentially dangerous and simply do not work in CSP environments.\nThe MDN page for eval() even has a section called “Don’t use eval!”\n// bad\nlet obj = { a: 20, b: 30 };\nlet propName = getPropName();  // returns \"a\" or \"b\"\neval( 'var result = obj.' + propName );\n// good\nlet obj = { a: 20, b: 30 };\nlet propName = getPropName();  // returns \"a\" or \"b\"\nlet result = obj[ propName ];  //  obj[ \"a\" ] is the same as obj.a\nConstants should be named in ALL_UPPERCASE separated by underscores\nConstant names use CONSTANT_CASE: all uppercase letters, with words separated by underscores.\nIf you’re absolutely sure that a variable shouldn’t change, you can indicate this by capitalizing the name of the constant. This makes the constant’s immutability obvious as it gets used throughout your code.\nA notable exception to this rule is if the constant is function-scoped. In this case it should be written in camelCase.\n// bad\nconst number = 5;\n// good\nconst NUMBER = 5;\nOne variable per declaration\nEvery local variable declaration declares only one variable: declarations such as let a = 1, b = 2; are not used.\n// bad\nlet a = 1, b = 2, c = 3;\n// good\nlet a = 1;\nlet b = 2;\nlet c = 3;\nUse single quotes, not double quotes\nOrdinary string literals are delimited with single quotes ('), rather than double quotes (\").\nTip: if a string contains a single quote character, consider using a template string to avoid having to escape the quote.\n// bad\nlet directive = \"No identification of self or mission.\"\n// bad\nlet saying = 'Say it ain\\u0027t so.';\n// good\nlet directive = 'No identification of self or mission.';\n// good\nlet saying = `Say it ain't so`;\nA final note\nAs I said in the beginning, these are not mandates. Google is just one of many tech giants, and these are just recommendations.\nThat said, it is interesting to look at the style recommendations that are put out by a company like Google, which employs a lot of brilliant people who spend a lot of time writing excellent code.\nYou can follow these rules if you want to follow the guidelines for ‘Google compliant source code’ — but, of course, plenty of people disagree, and you’re free to brush any or all of this off.\nI personally think there are plenty of cases where Airbnb’s spec is more appealing than Google’s. No matter the stance you take on these particular rules, it is still important to keep stylistic consistency in mind when write any sort of code."}
{"_id":{"$oid":"5ac071da306e59cad8e39863"},"articleId":5,"title":"Week off in Iceland","author":"Daniel Simmons","body":"For anyone who isn’t already familiar with it, Google puts out a style guide for writing JavaScript that lays out (what Google believes to be) the best stylistic practices for writing clean, understandable code.\nThese are not hard and fast rules for writing valid JavaScript, only proscriptions for maintaining consistent and appealing style choices throughout your source files. This is particularly interesting for JavaScript, which is a flexible and forgiving language that allows for a wide variety of stylistic choices.\nGoogle and Airbnb have two of the most popular style guides out there. I’d definitely recommend you check out both of them if you spend much time writing JS.\nThe following are thirteen of what I think are the most interesting and relevant rules from Google’s JS Style Guide.\nThey deal with everything from hotly contested issues (tabs versus spaces, and the controversial issue of how semicolons should be used), to a few more obscure specifications which surprised me. They will definitely change the way I write my JS going forward.\nFor each rule, I’ll give a summary of the specification, followed by a supporting quote from the style guide that describes the rule in detail. Where applicable, I’ll also provide an example of the style in practice, and contrast it with code that does not follow the rule.\nUse spaces, not tabs\nAside from the line terminator sequence, the ASCII horizontal space character (0x20) is the only whitespace character that appears anywhere in a source file. This implies that… Tab characters are not used for indentation.\nThe guide later specifies you should use two spaces (not four) for indentation.\n// bad\nfunction foo() {\n∙∙∙∙let name;\n}\n\n// bad\nfunction bar() {\n∙let name;\n}\n\n// good\nfunction baz() {\n∙∙let name;\n}\nSemicolons ARE required\nEvery statement must be terminated with a semicolon. Relying on automatic semicolon insertion is forbidden.\nAlthough I can’t imagine why anyone is opposed to this idea, the consistent use of semicolons in JS is becoming the new ‘spaces versus tabs’ debate. Google’s coming out firmly here in the defence of the semicolon.\n// bad\nlet luke = {}\nlet leia = {}\n[luke, leia].forEach(jedi =\u003e jedi.father = 'vader')\n// good\nlet luke = {};\nlet leia = {};\n[luke, leia].forEach((jedi) =\u003e {\n  jedi.father = 'vader';\n});\nDon’t use ES6 modules (yet)\nDo not use ES6 modules yet (i.e. the export and import keywords), as their semantics are not yet finalized. Note that this policy will be revisited once the semantics are fully-standard.\n// Don't do this kind of thing yet:\n//------ lib.js ------\nexport function square(x) {\n    return x * x;\n}\nexport function diag(x, y) {\n    return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\nimport { square, diag } from 'lib';\nHorizontal alignment is discouraged (but not forbidden)\nThis practice is permitted, but it is generally discouraged by Google Style. It is not even required to maintain horizontal alignment in places where it was already used.\nHorizontal alignment is the practice of adding a variable number of additional spaces in your code, to make certain tokens appear directly below certain other tokens on previous lines.\n// bad\n{\n  tiny:   42,  \n  longer: 435, \n};\n// good\n{\n  tiny: 42, \n  longer: 435,\n};\nDon’t use var anymore\nDeclare all local variables with either const or let. Use const by default, unless a variable needs to be reassigned. The var keyword must not be used.\nI still see people using var in code samples on StackOverflow and elsewhere. I can’t tell if there are people out there who will make a case for it, or if it’s just a case of old habits dying hard.\n// bad\nvar example = 42;\n// good\nlet example = 42;\nArrow functions are preferred\nArrow functions provide a concise syntax and fix a number of difficulties with this. Prefer arrow functions over the function keyword, particularly for nested functions\nI’ll be honest, I just thought that arrow functions were great because they were more concise and nicer to look at. Turns out they also serve a pretty important purpose.\n// bad\n[1, 2, 3].map(function (x) {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) =\u003e {\n  const y = x + 1;\n  return x * y;\n});\nUse template strings instead of concatenation\nUse template strings (delimited with `) over complex string concatenation, particularly if multiple string literals are involved. Template strings may span multiple lines.\n// bad\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n\n// bad\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n\n// bad\nfunction sayHi(name) {\n  return `How are you, ${ name }?`;\n}\n\n// good\nfunction sayHi(name) {\n  return `How are you, ${name}?`;\n}\nDon’t use line continuations for long strings\nDo not use line continuations (that is, ending a line inside a string literal with a backslash) in either ordinary or template string literals. Even though ES5 allows this, it can lead to tricky errors if any trailing whitespace comes after the slash, and is less obvious to readers.\nInterestingly enough, this is a rule that Google and Airbnb disagree on (here’s Airbnb’s spec).\nWhile Google recommends concatenating longer strings (as shown below) Airbnb’s style guide recommends essentially doing nothing, and allowing long strings to go on as long as they need to.\n// bad (sorry, this doesn't show up well on mobile)\nconst longString = 'This is a very long string that \\\n    far exceeds the 80 column limit. It unfortunately \\\n    contains long stretches of spaces due to how the \\\n    continued lines are indented.';\n// good\nconst longString = 'This is a very long string that ' + \n    'far exceeds the 80 column limit. It does not contain ' + \n    'long stretches of spaces since the concatenated ' +\n    'strings are cleaner.';\n“for… of” is the preferred type of ‘for loop’\nWith ES6, the language now has three different kinds of for loops. All may be used, though for-of loops should be preferred when possible.\nThis is a strange one if you ask me, but I thought I’d include it because it is pretty interesting that Google declares a preferred type of for loop.\nI was always under the impression that for... in loops were better for objects, while for... of were better suited to arrays. A ‘right tool for the right job’ type situation.\nWhile Google’s specification here doesn’t necessarily contradict that idea, it is still interesting to know they have a preference for this loop in particular.\nDon’t use eval()\nDo not use eval or the Function(...string) constructor (except for code loaders). These features are potentially dangerous and simply do not work in CSP environments.\nThe MDN page for eval() even has a section called “Don’t use eval!”\n// bad\nlet obj = { a: 20, b: 30 };\nlet propName = getPropName();  // returns \"a\" or \"b\"\neval( 'var result = obj.' + propName );\n// good\nlet obj = { a: 20, b: 30 };\nlet propName = getPropName();  // returns \"a\" or \"b\"\nlet result = obj[ propName ];  //  obj[ \"a\" ] is the same as obj.a\nConstants should be named in ALL_UPPERCASE separated by underscores\nConstant names use CONSTANT_CASE: all uppercase letters, with words separated by underscores.\nIf you’re absolutely sure that a variable shouldn’t change, you can indicate this by capitalizing the name of the constant. This makes the constant’s immutability obvious as it gets used throughout your code.\nA notable exception to this rule is if the constant is function-scoped. In this case it should be written in camelCase.\n// bad\nconst number = 5;\n// good\nconst NUMBER = 5;\nOne variable per declaration\nEvery local variable declaration declares only one variable: declarations such as let a = 1, b = 2; are not used.\n// bad\nlet a = 1, b = 2, c = 3;\n// good\nlet a = 1;\nlet b = 2;\nlet c = 3;\nUse single quotes, not double quotes\nOrdinary string literals are delimited with single quotes ('), rather than double quotes (\").\nTip: if a string contains a single quote character, consider using a template string to avoid having to escape the quote.\n// bad\nlet directive = \"No identification of self or mission.\"\n// bad\nlet saying = 'Say it ain\\u0027t so.';\n// good\nlet directive = 'No identification of self or mission.';\n// good\nlet saying = `Say it ain't so`;\nA final note\nAs I said in the beginning, these are not mandates. Google is just one of many tech giants, and these are just recommendations.\nThat said, it is interesting to look at the style recommendations that are put out by a company like Google, which employs a lot of brilliant people who spend a lot of time writing excellent code.\nYou can follow these rules if you want to follow the guidelines for ‘Google compliant source code’ — but, of course, plenty of people disagree, and you’re free to brush any or all of this off.\nI personally think there are plenty of cases where Airbnb’s spec is more appealing than Google’s. No matter the stance you take on these particular rules, it is still important to keep stylistic consistency in mind when write any sort of code."}
